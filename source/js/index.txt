.. role:: function-name
.. role:: function-name-danger
.. role:: function-signature
.. role:: text-note
.. role:: null-effect

**********************
Appbase Javascript API
**********************

|

-----------------------------

.. index:: Javascript Overview

Brief Overview
==============

.. raw:: html

  <p>
    The Appbase data model is represented as a graph. Vertices are used for storing and retrieving primitive data, and linked to other vertices using edges. Read more about it in the <strong><a href="../overview/index.html">overview document</a></strong>.
  </p>
  <h3 class="null-effect" style="margin-top:20px;">Appbase Datatypes</h3>
  <h4>Primitive</h4>
    <ul>
      <li>Boolean</li>
      <li>Number</li>
      <li>String</li>
    </ul>
  <h4>Objects</h4>
    <ul>
      <li>
        <dt>Appbase Reference</dt>
        <dd>Reference to a vertex on a given <em>Appbase path</em>.</dd>
      </li>
      <li>
        <dt>Vertex Snapshot</dt>
      </li>
    </ul>

| 

Appbase Object
==============

----

**Appbase** is the global object exposed to the Javascript namespace. It has two methods ``create()`` and ``ref()``.

.. index:: Appbase.create()

:function-name:`Appbase.create()` :function-signature:`Appbase.create(namespace, [key])`
----------------------------------------------------------------------------------------

  .. raw:: html

    <div id="appbase-create" class="foobar">

  .. container:: definition

    Create a new Appbase **vertex**.

  .. container:: returns

    **Returns**
      *Appbase Reference* of the created vertex.

  .. container:: everything-else

    **Usage**
      ``Appbase.create(namespace,[key])``

      - **namespace** ``String`` A namespace identifier, a new namespace is created if one does not already exist.
      - **key** *(optional)* ``String`` Vertex identifier, has to be unique in a namespace. A unique identifier is generated if not provided.

      :text-note:`Note` *key* cannot contain any whitespace, '~' or '/' characters.

    **Example**

    .. sourcecode:: js

      var abref = Appbase.create('prisoner', 'andy_dufresne');

  .. raw:: html

    </div>

| 

.. index:: Appbase.ref()

:function-name:`Appbase.ref()` :function-signature:`Appbase.ref(URL)`
---------------------------------------------------------------------

  .. raw:: html

    <div id="appbase-ref" class="foobar">

  .. container:: definition

    Reference to an *existing vertex* from the Appbase URL.

  .. container:: returns

    **Returns**   
      `Appbase Reference` of the vertex.

  .. container:: everything-else

    **Usage**
      ``Appbase.ref(URL)``

      | **URL** ``String`` Appbase URL of the vertex

    **Example**

    .. sourcecode:: js

      var abref = Appbase.ref('https://shawshank.api.appbase.io/prisoner/andy_dufresne/');


    The *URL*, 'https://shawshank.api.appbase.io/prisoner/andy_dufresne/' points to a *vertex* in the namespace ``prisoner`` with key ``andy_dufresne``. **https://shawshank.api.appbase.io** is the app's base URL.

  .. raw:: html

    </div>

|

.. index:: Appbase Reference

Appbase Reference
=================

-----

**Appbase Reference** allows operations related to reading, writing and modifying the graph. Each of these methods return a *Appbase Reference* to allow chaining of different methods.

|

.. index:: setData()

:function-name:`.setData()` :function-signature:`setData(name, val, [callback])`
--------------------------------------------------------------------------------

  .. raw:: html

    <div id="appbase-set-property" class="foobar">

  .. container:: definition

    Set data property to this Appbase location.

  .. container:: everything-else

    **Usage**
      ``abref.setData(name, val, [callback])``

      - **name** ``String`` Property name
      - **value** ``String``/``Number`` value
      - **callback** ``Function`` will be passed with these as arguments:
          - **error** `String`
          - **abref** `Appbase Reference` - points to the same path on which the method is called
          - **snapObj** `Vertex Snapshot` - Snapshot of the new data stored in the vertex.

    **Returns**
      `Appbase Reference` of the vertex at current location.

  .. raw:: html 

    </div>

|

.. index:: commitData()

:function-name:`.commitData()` :function-signature:`commitData(name, apply, [callback])`
-------------------------------------------------------------------------------------------

  .. raw:: html

    <div id="appbase-commit-property" class="foobar">

  .. container:: definition

    Set data property to this Appbase location consistently.

  .. container:: everything-else

    **Usage**
      ``abref.commitData(name, apply, [callback])``

      - **name** ``String`` Property name
      - **apply** ``Function`` The function should return a String or a Number. The old value is passed in as an argument to the function.
      - **callback** ``Function`` will be passed these arguments:
          - **error** `String`
          - **abref** `Appbase Reference` of the vertex at the current location
          - **snapObj** `Vertex Snapshot` Snapshot of the new data stored in the vertex
          - **isCommitted** `Boolean` ``true`` if the final final value has been committed
  
    **Returns**
      `Appbase Reference` of the vertex at current location.

    **Example**

    .. sourcecode:: js 

      var toolRef = Appbase.ref('https://shawshank.api.appbase.io/prisoner/andy_dufresne/rock_hammer');

      toolRef.commitData('size',function(prevSize) {
        return prevSize + 1;
      });

      /* The size of Dufresne's rock hammer can be increased
       * consistently (no changes will be lost). If 3 people
       * the size by 1 each simultaneously, the size will
       * increase by 3.
       */

|

.. index:: removeData()

:function-name:`.removeData()` :function-signature:`removeData(name, [callback])`
------------------------------------------------------------------------------------------

  .. raw:: html

    <div id="appbase-remove-property" class="foobar">

  .. container:: definition

    Remove a data property from the current location.

  .. container:: everything-else

    **Usage**
      ``abref.removeData(name, [callback])``

      - **name** ``String`` Property name
      - **callback** ``Function`` will be passed with these arguments:
          - **error** `String`
          - **abref** `Appbase Reference` of the vertex a the current location.
          - **snapObj** `Vertex Snapshot` of the new data stored in the vertex.

    **Returns**
      `Appbase Reference` of the vertex at current location.

  .. raw:: html

    </div>

|

.. index:: setEdge()

:function-name:`.setEdge()` :function-signature:`setEdge(dest_ref, [edgename], [order], [callback])`
-----------------------------------------------------------------------------------------------------

  .. raw:: html

    <div id="appbase-set-edge" class="foobar">

  .. container:: definition

    Set an edge to a specific destination vertex. It can optionally have an order.

  .. container:: everything-else

    **Usage**
      ``abref.setEdge(dest_ref, [edgename], [order], [callback])``

      - **edgename** ``String``
      - **dest_ref** ``Appbase Reference`` of the destination vertex
      - **callback** ``Function`` will be passed with these arguments:
          - **error** `String`
          - **abref** `Appbase Reference` of the vertex at current location.

    **Returns**
      `Appbase Reference` of the vertex at current location.

    :text-note:`Consequeunces for event firing`

    If the current vertex already has an edge with the provided ``edgename`` pointing to a different vertex, **setEdge** will replace the edge's out vertex to ``dest_ref``.
    The edge is considered to be *removed* and *added* again, therefore firing an **edge_removed** event followed by an **edge_added** event.


    **Example**

    .. sourcecode:: js

      var prisonerRef = Appbase.ref('https://shawshank.api.appbase.io/prisoner/andy_dufresne');
      var toolRef = Appbase.new('tool'); // new vertex of the namespace 'tool'

      toolRef.setData('size',12);
      prisonerRef.setEdge('rock_hammer',toolRef);

      /* Now Dufresne's rock hammer can be accessed directly with 
       * the path: 'https://shawshank.api.appbase.io/prisoner/andy_dufresne/rock_hammer'
       */

|

.. index:: removeEdge()

:function-name:`.removeEdge()` :function-signature:`removeEdge(edgename, [callback])`
-------------------------------------------------------------------------------------

  .. raw:: html

    <div id="appbase-remove-edge" class="foobar">

  .. container:: definition

    Removes an outgoing edge from the vertex at the current location.

  .. container:: everything-else

    **Usage**
      ``abref.remove_edge(name, [callback])``

      - **name** `String` - named edges
      - **callback** `Function` - will be passed these as arguments:
          - **error** `Boolean/String`
          - **abref** `Appbase Reference` - points to the same path on which the method is called

    **Returns**
      `Appbase Reference` of the vertex at current location.

|

.. index:: delete()

:function-name-danger:`.delete()` :function-signature:`delete([callback])`
--------------------------------------------------------------------------

  .. raw:: html

    <div id="appbase-delete" class="foobar">

  .. container:: definition

    Delete the vertex, it's associated data and the connecting edges from the current location.

  .. container:: returns

    **Returns**
      ``Boolean`` *true* if successful

  .. container:: everything-else

    **Usage**
      ``abref.delete([callback])``

      - **callback** ``Function`` will be passed with these arguments:
          - **error** `Boolean/String`

    The Appbase Reference now turns invalid and the listeners will not fire. Consequently, any data modification operations will fail.

|

.. index:: url()

:function-name:`.url()` :function-signature:`url()`
-----------------------------------------------------

  .. raw:: html

    <div id="appbase-path" class="foobar">

  .. container:: definition

    Appbase URL of the current reference.

  .. container:: returns

    **Returns**
      ``String`` AppbaseURL

  .. container:: everything-else

    **Usage**
      ``abref.path()``

  .. raw:: html

    </div>

|

.. index:: outVertex()

:function-name:`.outVertex()` :function-signature:`outVertex(name)`
------------------------------------------------------------------

  .. raw:: html

    <div id="appbase-out" class="foobar">

  .. container:: definition

    Reference to the corresponding *out vertex* with the given *name*.

  .. container:: returns

    **Returns**
      `Appbase Reference` of the corresponding `out vertex`

  .. container:: everything-else

    **Usage**
      ``abref.outVertex(name)``

    

    **Example**

    .. sourcecode:: js

      var prisonerRef = Appbase.ref('https://shawshank.api.appbase.io/prisoner/andy_dufresne');
      var toolRef = prisonerRef.outVertex('rock_hammer');

      /* `toolRef` points to the the path:
       * 'https://shawshank.api.appbase.io/prisoner/andy_dufresne/rock_hammer'
       */

  .. raw:: html

    </div>

|

.. index:: inVertex()

:function-name:`.inVertex()` :function-signature:`inVertex()`
------------------------------------------------------------

  .. raw:: html

    <div id="appbase-in" class="foobar">

  .. container:: definition

    Reference to the corresponding *in vertex* from the current vertex.

  .. container:: returns

    **Returns**
      `Appbase Reference` of the `in vertex`

  .. container:: everything-else

    **Usage**
      ``abref.inVertex()``

    Throws an error if ``abref`` does not have an **in vertex**.

    **Example**

    .. sourcecode:: js

      var toolRef = Appbase.ref('https://shawshank.api.appbase.io/prisoner/andy_dufresne/rock_hammer');
      var prisonerRef = toolRef.in_vertex();

      /* `prisonerRef` points to the the path:
       * 'https://shawshank.api.appbase.io/prisoner/andy_dufresne'
       */
       
      var newRef = prisonerRef.in_vertex(); //Throws an error

  .. raw:: html

    </div>

|

Data Listeners
==============

----

.. index:: on('properties')

:function-name:`on('properties')` :function-signature:`on('properties', [listener_name], callback)`
----------------------------------------------------------------------------------------------------

  .. raw:: html

    <div id="appbase-on-properties" class="foobar">

  .. container:: definition

    Listen to value changes on a vertex.

  .. container:: returns

    **Returns**
      ``String`` The name of the listener, which can be used to turn them off

  .. container:: everything-else

    **Usage**
      ``abref.on('properties', [listener_name], callback)``

      - **listener_name** *(Optional)* `String` - Identifier for the listener.
      - **callback** `Function` - will be passed these as arguments:
          - **error** `Boolean/String`
          - **abref** `Appbase Reference` - points to the path on which the event is fired
          - **snapObj** `Vertex Snapshot` - Snapshot of the data stored in the vertex. Take a look at the documentation of `Vertex Snapshot`

    `listener_name` is a unique string, which can be used later on to turn this listener off using `offWithName(listener_name)`. This is a way to keep track of listeners. If a `listener_name` is given again with a different callback function, the old callback function is replaced, and will no longer be called when the event is fired, instead the new function will be called. If no `listener_name` is given, a unique string will be generated as the listener's name and returned.


    **Example**

    .. sourcecode:: js

      TODO: change according to the method signature
      var toolRef = Appbase.ref('https://shawshank.api.appbase.io/prisoner/andy_dufresne/rock_hammer');
      // Existing data : {size:12}

      toolRef.on('properties',function(err,ref,snap){
         console.log(snap.properties().size); 
      );

      setTimeout(function(){
          toolRef.properties.add('size',13);
      },2000);

      /* It would immediately log '12' - the existing properties. 
       * After 2 secs, It would log '13'.
       */

  .. raw:: html

    </div>

|

.. index:: on('edge_added')

:function-name:`on('edge_added')` :function-signature:`on('edge_added', edgetype, [listener_name], [options], callback)`
-------------------------------------------------------------------------------------------------------------------------------

  .. raw:: html 

    <div id="appbase-edge-added" class="foobar">

  .. container:: definition

    Get existing edges inserted at a location, and listen to new ones.

  .. container:: returns

    **Returns**
      `String` - the listener's name and can be used to turn the listener off.

  .. container:: everything-else

    **Usage**
      ``abref.on('edge_added', edgetype, [listener_name], [options], callback)``

      - **edgetype** `String` - 'ordered' or 'named'
      - **listener_name** *(Optional)* `String` - Name given to the listener. For details, take a look at the documentation of `on('properties')`
      - **options** `Object`
          - **limit** How many existing edges to fetch - only for ordered edges
          - **startAt** `Number` - Priority to start with - only for ordered edges
          - **endAt** `Number` - Priority to end with - only for ordered edges
          - **skip**  `Number` - Skip initial edges - only for ordered edges
          - **noData** `Boolean` - Whether to include the data stored at the vertex where the edge points 
      - **callback** `Function` - will be passed these as arguments:
          - **error** `Boolean/String`
          - **abref** `Appbase Reference` - pointing to path of the edge
          - **[snapObj]** `Vertex Snapshot` - Snapshot of the data stored in the vertex, where the edge points. Take a look at the documentation of `Vertex Snapshot`

    `snapObj` will not be passed if `{noData: true}` is passed as the options to the listener.

    `startAt` and `limit` are only effective for retrieving the existing properties. New edges will be returned regardless of their index.


    **Example**

    .. sourcecode: js

      TODO: change according to the method signature
      var redRef = Appbase.new('prisoner','ellis_boyd_red'); // New prisoner
      redRef.properties.add('firstname','Ellis Boyd');
      redRef.properties.add('lastname','Redding');
      redRef.properties.add('nick','Red');

      var andyRef = Appbase.ref('https://shawshank.api.appbase.io/prisoner/andy_dufresne');

      andyRef.on('edge_added',function(edgeSnap){
          console.log('Name:', edgeSnap.val().nick);
      });

      andyRef.edges.add('best*friend',redRef);

      /* stdout
       * |-----------------
       * | Name: Red
       * |-----------------
       */

  .. raw:: html

    </div>

|

.. index:: on('edge_removed')

:function-name:`on('edge_removed')` :function-signature:`on('edge_removed', edgetype, [listener_name], callback)`
--------------------------------------------------------------------------------------------------------------------

  .. raw:: html

    <div id="appbase-edge-removed" class="foobar">

  .. container:: definition

    Listen to removal of edges. 

  .. container:: returns

    **Returns**
      `String` - the listener's name and can be used to turn the listener off.

  .. container:: everything-else

    **Usage**
      ``abref.on('edge_removed', edgetype, [listener_name], callback)``

      - **edgetype** `String` - 'ordered' or 'named'
      - **listener_name** *(Optional)* `String` - Name given to the listener. For details, take a look at the documentation of `on('properties')`.
      - **callback** `Function` - will be passed these as arguments:
          - **error** `Boolean/String`
          - **abref** `Appbase Reference` - pointing to path of the edge
          - **snapObj** `Vertex Snapshot` - Snapshot of the data stored in the vertex, where the edge used to point. Take a look at the documentation of `Vertex Snapshot`

  .. raw:: html

    </div>

|

.. index:: on('edge_changed')

:function-name:`on('edge_changed')` :function-signature:`on('edge_changed', [listener_name], callback)`
-------------------------------------------------------------------------------------------------------

  .. raw:: html

    <div id="appbase-edge-changed" class="foobar">

  .. container:: definition

    If the properties of the vertex, pointed by an existing edge is changed, this event is fired.

  .. container:: returns

    **Returns**
      `String` - the listener's name and can be used to turn the listener off.

  .. container:: everything-else

    **Usage**
      ``abref.on('edge_changed', edgetype, [listener_name], callback)``

    - **edgetype** `String` - 'ordered' or 'named'
    - **listener_name** *(Optional)* `String` - Name given to the listener. For details, take a look at the documentation of `on('properties')`.
    - **callback** `Function` - will be passed these as arguments:
        - **error** `Boolean/String`
        - **abref** `Appbase Reference` - pointing to path of the edge
        - **snapObj** `Vertex Snapshot` - Snapshot of the data stored in the vertex, where the edge points. Take a look at the documentation of `Vertex Snapshot`

    For this event to fire, in the background the vertexes pointed by all the edges are listened for **properties** event, and this would be a costly operation in terms of bandwidth if there are a huge number of edges.


    **Example**

    .. sourcecode: js

      TODO: change according to the method signature
      var andy = Appbase.ref('https://shawshank.api.appbase.io/prisoner/andy_dufresne');

      var toolRef = Appbase.ref('https://shawshank.api.appbase.io/prisoner/andy_dufresne/rock_hammer');
      // Existing data at this location: {size:12}


      andy.on('edge*changed',function(snapshot){
          for (var prop in snapshot.properties()) {
              console.log(prop,':',snapshot.properties()[prop]);
          }
      })

      toolRef.properties.add('usage','prison break');

      /* stdout
       * |-----------------
       * | size : 12
       * | usage : prison break
       * |-----------------
       */

  .. raw:: html

    </div>

|

.. index:: on('edge_moved')

:function-name:`on('edge_moved')` :function-signature:`on('edge_moved', [listener_name], callback)`
----------------------------------------------------------------------------------------------------

  .. raw:: html

    <div id="appbase-edge-moved" class="foobar">

  .. container:: definition

    TODO: only on ordered edges
    This event is fired, when the order of an edge is changed. 

    When the order of an edge is manually changed by calling `abref.edges.add()` on an existing edge, also the other edges are moved, either they are shifted upward or downward by '1' in the order. This event is fired for all the edges, moved manually or automatically.

  .. container:: returns

    **Returns**
      `String` - the listener's name and can be used to turn the listener off.

  .. container:: everything-else

    **Usage**
      ``abref.on('edge_moved', [listener_name], callback)``

      - **listener_name** *(Optional)* `String` - Name given to the listener. For details, take a look at the documentation of `on('properties')`.
      - **listenDepth** `Number` - The depth of edges up to which listen for data changes. Default value is `0`, meaning no listening on the properties.
      - **callback** `Function` - will be passed these as arguments:
          - **error** `Boolean/String`
          - **abref** `Appbase Reference` - pointing to path of the edge
          - **snapObj** `Vertex Snapshot` - Snapshot of the data stored in the vertex, where the edge points. Take a look at the documentation of `Vertex Snapshot`
 
  .. raw:: html

    </div>

|

.. index:: off()

:function-name:`off()` :function-signature:`off()`
--------------------------------------------------

  .. raw:: html

    <div id="appbase-off" class="foobar">

  .. container:: definition

    Turn off the listeners on an event.

  .. container:: returns

    **Returns**
      `Array` - containing listeners' names, which have been turned off.

  .. container:: everything-else

    **Usage**
      ``abref.off([event])``

      - **event** *(optional)* `String` - All the listeners on this event, will be turned off. If no event is given, all the listeners on all the events will be turned off.

|

.. index:: off()

:function-name:`off()` :function-signature:`off(listener_name)`
----------------------------------------------------------------

  .. raw:: html

    <div id="appbase-off" class="foobar">

  .. container:: definition

    Turn off a listener by its name.

  .. container:: everything-else

    **Usage**
      ``off(listener_name)``

    - **listener_name** `String` - The unique name given to the listener while calling `on(event)`.

  .. raw:: html

    </div>

|

Vertex Snapshot
===============

-------------------

*Vertex Snapshot* is an immutable copy of the data at a location in
*Appbase*. It is passed to callbacks in all event firing. It can’t be
modified and will never change. To modify data, use an Appbase
reference.

Snapshot Methods
----------------

+--------------------+---------------------------------------------------------------------+
| Method             | Returns                                                             |
+====================+=====================================================================+
| properties()       | prop-value pairs in the form of a JavaScript object                 |
+--------------------+---------------------------------------------------------------------+
| prevProperties()   | the previous version of prop-value pairs                            |
+--------------------+---------------------------------------------------------------------+
| namespace()        | the *namespace* of the vertex                                       |
+--------------------+---------------------------------------------------------------------+
| name()             | the edge name with which the vertex is stored in the current path   |
+--------------------+---------------------------------------------------------------------+
| index()            | index of this vertex in the current path                            |
+--------------------+---------------------------------------------------------------------+
| prevIndex()        | the previous index of this vertex in the current path               |
+--------------------+---------------------------------------------------------------------+

The following table shows what exact data would be returned by the
methods in different kind of events.

+--------------------+------------------------------------------------------------------------------------------------------------------------------------------+----------------------------------------------------+------------------------------------------------------------------+------------------------------------------------------------------------+----------------------------------------------------+
| Method             | value                                                                                                                                    | edge\_added                                        | edge\_removed                                                    | edge\_changed                                                          | edge\_moved                                        |
+====================+==========================================================================================================================================+====================================================+==================================================================+========================================================================+====================================================+
| properties()       | properties of the **vertex being listened**                                                                                              | properties of the vertex pointed by **the edge**   | **null**                                                         | **new** properties of the vertex pointed by **the edge**               | properties of the vertex pointed by **the edge**   |
+--------------------+------------------------------------------------------------------------------------------------------------------------------------------+----------------------------------------------------+------------------------------------------------------------------+------------------------------------------------------------------------+----------------------------------------------------+
| prevProperties()   | **null** when the event is fired for **the first time** , *and*, **previous version** of properties when they are **changed later on**   | **null**                                           | properties of the vertex pointed by **the edge being deleted**   | **previous version** of properties of the vertex pointed by the edge   | same as **properties()**                           |
+--------------------+------------------------------------------------------------------------------------------------------------------------------------------+----------------------------------------------------+------------------------------------------------------------------+------------------------------------------------------------------------+----------------------------------------------------+
| index()            | **index** of the edge pointing to **this vertex** in the current path                                                                    | **index** of **the edge**                          | **null**                                                         | **index** of **the edge**                                              | **current** index of **the edge**                  |
+--------------------+------------------------------------------------------------------------------------------------------------------------------------------+----------------------------------------------------+------------------------------------------------------------------+------------------------------------------------------------------------+----------------------------------------------------+
| prevIndex()        | same as **index()**                                                                                                                      | **null**                                           | **index** of **the edge being deleted**                          | same as **index()**                                                    | **previous** index of **the edge**                 |
+--------------------+------------------------------------------------------------------------------------------------------------------------------------------+----------------------------------------------------+------------------------------------------------------------------+------------------------------------------------------------------------+----------------------------------------------------+

|