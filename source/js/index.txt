.. role:: function-name
.. role:: function-signature

**********************
Appbase Javascript API
**********************

|

-----------------------------

.. index:: Javascript Overview

Brief Overview
==============

The Appbase data model is represented as a graph. Vertices are used for storing and retrieving primitive data, and linked to other vertices using edges. Read more about it in the overview document `here <../overview/index.html>`_.

| 

Appbase Datatypes
-----------------

Primitive
~~~~~~~~~
* Number
* String

Objects
~~~~~~~
* Vertex Reference
* Vertex Snapshot

| 

---------------------

Appbase Object
==============

``Appbase`` is the only global object exposed to the global Javascript namespace.

.. index:: Appbase.new()

:function-name:`Appbase.new()` :function-signature:`Appbase.new(namespace, [key])`
----------------------------------------------------------------------------------

  .. raw:: html

    <div id="appbase-new" class="foobar">

  .. container:: definition

    Creates a new **vertex** under a *namespace*.

  .. container:: returns

    **Returns**
      *Vertex Reference*

  .. container:: everything-else

    **Usage**
      ``Appbase.new(namespace,[key])``

      - **namespace** ``String`` Namespace key
      - **key** *(optional)* ``String`` Key given to the new vertex

    The *namespace* is automatically created if it does not already exist.

    A unique *key* can be given to the vertex. Otherwise, a unique key will be generated automatically. The key should not contain any whitespace and '/' character.

    **Example**

    .. sourcecode:: js

      var vref = Appbase.new('prisoner', 'andy_dufresne', function(error) {
          if (!error) {
              console.log('Vertex created.')
          } else {
              console.log('The vertex already exists.')
          }
      );

  .. raw:: html

    </div>

| 

.. index:: Appbase.ref()

:function-name:`Appbase.ref()` :function-signature:`Appbase.ref(path)`
-----------------------------------------------------------------------

  .. raw:: html

    <div id="appbase-ref" class="foobar">

  .. container:: definition

    A *Vertex Reference* allows operating on a vertex stored in *Appbase* at some path. This method creates a reference pointing to a path.

  .. container:: returns

    **Returns**
      ``Vertex Reference`` - pointing to the vertex located at the given path.

  .. container:: everything-else

    **Usage**
      ``Appbase.ref(path)``

      | **path** ``String`` - path to the vertex in Appbase

    A *Path* in Appbase consists of one or more linked vertices with the endpoint always being a vertex. '/' is used to demarcate between consequent vertices. The *base-url* is a unique string for the Application, and the first element after the url represents a namespace, and following elements are objects.


    **Example**

    .. sourcecode:: js

      var vref = Appbase.ref('https://shawshank.api.appbase.io/prisoner/andy_dufresne/rock_hammer');


    The *path*, 'https://shawshank.api.appbase.io/prisoner/andy_dufresne/rock_hammer' points to a *vertex*, which is inserted as the **edgename : 'rock_hammer'** in the *vertex* of the **namespace : 'prisoner'** with **key : andy_dufresne**. The application's *base url* is **https://shawshank.api.appbase.io**.

  .. raw:: html

    </div>
    
|

-----

Vertex Reference
=================

Operations, such as read/write on vertex, located at a path can be done using a **Vertex Reference**.

|

.. index:: path()

:function-name:`path()` :function-signature:`path()`
----------------------------------------------------

  .. raw:: html

    <div id="appbase-path" class="foobar">

  .. container:: definition

    To know what path this reference points to.

  .. container:: returns

    **Returns**
      ``String`` - The path

  .. container:: everything-else

    **Usage**
      ``vref.path()``

  .. raw:: html

    </div>

|

.. index:: set_property()

:function-name:`set_property()` :function-signature:`set_property(name, val, [callback])`
-----------------------------------------------------------------------------------------

  .. raw:: html

    <div id="appbase-set-property" class="foobar">

  .. container:: definition

    Set a vertex property and give it a value, or set a value for an existing property.

  .. container:: returns

    **Returns**
      `Vertex Reference` - pointing to the same path where the method is called. This allows chaining of methods.

  .. container:: everything-else

    **Usage**
      ``vref.set_property(name,val,[callback])``

      - **name** `String` - property name
      - **value** `String/Number` - value
      - **callback** `Function` - will be passed these as arguments:
          - **error** `Boolean/String`
          - **vref** `Vertex Reference` - points to the same path on which the method is called
          - **snapObj** `Vertex Snapshot` - Snapshot of the new data stored in the vertex.

  .. raw:: html 

    </div>

|

.. index:: commit_property()

:function-name:`commit_property()` :function-signature:`commit_property(property, apply, [callback])`
-----------------------------------------------------------------------------------------------------

  .. raw:: html

    <div id="appbase-commit-property" class="foobar">

  .. container:: definition

    A strongly consistent *set* operation. It allows you create consistent aggregators, such as counters.

  .. container:: returns

    **Returns**
      `Vertex Reference` - pointing to the same path where the method is called. This allows chaining of methods.

  .. container:: everything-else

    **Usage**
      ``vref.commit_property(property, apply, [callback])``

      - **property** `String`
      - **apply** `function` - The function should return which returns String/Number. The old value is passed in as an argument to the function
      - **callback** `Function` - will be passed these as arguments:
          - **error** `Boolean/String`
          - **vref** `Vertex Reference` - points to the same path on which the method is called
          - **snapObj** `Vertex Snapshot` - Snapshot of the new data stored in the vertex.
          - **isCommitted** `Boolean` - Whether the final value is committed or is still the new data returned from the server 
  

    **Example**

    .. sourcecode:: js 

      var toolRef = Appbase.ref('https://shawshank.api.appbase.io/prisoner/andy_dufresne/rock_hammer');

      toolRef.properties.commit('size',function(prevSize) {
        return prevSize + 1;
      });

      /* The size of Dufresne's rock hammer can be increased
       * consistently (no changes will be lost). If 3 people
       * the size by 1 each simultaneously, the size will
       * increase by 3.
       */

|

.. index:: remove_property()

:function-name:`remove_property()` :function-signature:`remove_property(prop, [callback])`
------------------------------------------------------------------------------------------

  .. raw:: html

    <div id="appbase-remove-property" class="foobar">

  .. container:: definition

    Removes a property.

  .. container:: returns

    **Returns**
      `Vertex Reference` - pointing to the same path where the method is called. This allows chaining of methods.

  .. container:: everything-else

    **Usage**
      ``vref.properties.remove(prop,[callback])``

      - **prop** `String` - property name
      - **callback** `Function` - will be passed these as arguments:
          - **error** `Boolean/String`
          - **vref** `Vertex Reference` - points to the same path on which the method is called
          - **snapObj** `Vertex Snapshot` - - Snapshot of the new data stored in the vertex.

  .. raw:: html

    </div>

|

.. index:: set_edge()

:function-name:`set_edge()` :function-signature:`set_edge(vref, edgename, [callback])`
---------------------------------------------------------------------------------------

  .. raw:: html

    <div id="appbase-set-edge" class="foobar">

  .. container:: definition

    Sets/inserts a unidirectional edge to another vertex. This operation also creates a new accessible path, which can be used to create a `Vertex Reference`.

  .. container:: returns

    **Returns**
      `Vertex Reference` - pointing to the same path where the method is called. This allows chaining of methods.

  .. container:: everything-else

    **Usage**
      ``vref.set_edge(vref, edgename, [callback])``

      - **edgename** `String`
      - **vref** `Vertex Reference` - The vertex where the edge would point
      - **callback** `Function` - will be passed these as arguments:
          - **error** `Boolean/String`
          - **vref** `Vertex Reference` - points to the same path on which the method is called

    For named edges, if some edge exists and points to a vertex, and now its passed as `edgename` with a `Vertex Reference` of some other vertex, the edge will be *replaced*. It is considered to be *removed* and *added* again, therefore, **edge_removed** event will be fired, followed by **edge_added** for the same edge. Take a look at the documentation of `vref.on()` for more details on the events.


    **Example**

    .. sourcecode:: js

      var prisonerRef = Appbase.ref('https://shawshank.api.appbase.io/prisoner/andy_dufresne');
      var toolRef = Appbase.new('tool'); // new vertex of the namespace 'tool'

      toolRef.properties.add('size',12);
      prisonerRef.named_edges.add('rock_hammer',toolRef);

      /* Now Dufresne's rock hammer can be accessed directly with 
       * the path: 'https://shawshank.api.appbase.io/prisoner/andy*dufresne/rock*hammer'
       */

|

.. index:: remove_edge()

:function-name:`remove_edge()` :function-signature:`remove_edge(name, [callback])`
----------------------------------------------------------------------------------

  .. raw:: html

    <div id="appbase-remove-edge" class="foobar">

  .. container:: definition

    Removes an edge.

  .. container:: returns

    **Returns**
      `Vertex Reference` - pointing to the same path where the method is called. This allows chaining of methods.

  .. container:: everything-else

    **Usage**
      ``vref.remove_edge(name, [callback])``

      - **name** `String` - named edges
      - **callback** `Function` - will be passed these as arguments:
          - **error** `Boolean/String`
          - **vref** `Vertex Reference` - points to the same path on which the method is called

|

.. index:: delete()

:function-name:`delete()` :function-signature:`delete([callback])`
------------------------------------------------------------------

  .. raw:: html

    <div id="appbase-delete" class="foobar">

  .. container:: definition

    Deletes the vertex, edges to this vertex in other vertexes will be removed as well.

  .. container:: returns

    **Returns**
      ``Boolean`` - *true* if successful

  .. container:: everything-else

    **Usage**
      ``vref.delete([callback])``

      - **callback** `Function` - will be passed these as arguments:
          - **error** `Boolean/String`

    The Vertex Reference now turns invalid and listeners won't fire. Any data modification operation will fail.

|

.. index:: out_vertex()

:function-name:`out_vertex()` :function-signature:`out_vertex(name)`
--------------------------------------------------------------------

  .. raw:: html

    <div id="appbase-out" class="foobar">

  .. container:: definition

    Reference to the corresponding *out vertex* with the given *name*.

  .. container:: returns

    **Returns**
      `Vertex Reference` of the corresponding ``out_vertex``

  .. container:: everything-else

    **Usage**
      ``vref.out_vertex(name)``

    

    **Example**

    .. sourcecode:: js

      var prisonerRef = Appbase.ref('https://shawshank.api.appbase.io/prisoner/andy_dufresne');
      var toolRef = prisonerRef.out_vertex('rock_hammer');

      /* `toolRef` points to the the path:
       * 'https://shawshank.api.appbase.io/prisoner/andy_dufresne/rock_hammer'
       */

  .. raw:: html

    </div>

|

.. index:: in_vertex()

:function-name:`in_vertex()` :function-signature:`in_vertex()`
--------------------------------------------------------------

  .. raw:: html

    <div id="appbase-in" class="foobar">

  .. container:: definition

    Reference to the corresponding *in vertex* from the current vertex.

  .. container:: returns

    **Returns**
      `Vertex Reference` of the ``in_vertex``

  .. container:: everything-else

    **Usage**
      ``vref.in_vertex()``

    Throws an error if ``vref`` does not have an **in vertex**.

    **Example**

    .. sourcecode:: js

      var toolRef = Appbase.ref('https://shawshank.api.appbase.io/prisoner/andy_dufresne/rock_hammer');
      var prisonerRef = toolRef.in_vertex();

      /* `prisonerRef` points to the the path:
       * 'https://shawshank.api.appbase.io/prisoner/andy_dufresne'
       */
       
      var newRef = prisonerRef.in_vertex(); //Throws an error

  .. raw:: html

    </div>

|

----

Data Listeners
==============

.. index:: on('properties')

:function-name:`on('properties')` :function-signature:`on('properties', [listener_name], callback)`
----------------------------------------------------------------------------------------------------

  .. raw:: html

    <div id="appbase-on-properties" class="foobar">

  .. container:: definition

    Listen to value changes on a vertex.

  .. container:: returns

    **Returns**
      ``String`` The name of the listener, which can be used to turn them off

  .. container:: everything-else

    **Usage**
      ``vref.on('properties', [listener_name], callback)``

      - **listener_name** *(Optional)* `String` - Identifier for the listener.
      - **callback** `Function` - will be passed these as arguments:
          - **error** `Boolean/String`
          - **vref** `Vertex Reference` - points to the path on which the event is fired
          - **snapObj** `Vertex Snapshot` - Snapshot of the data stored in the vertex. Take a look at the documentation of `Vertex Snapshot`

    `listener_name` is a unique string, which can be used later on to turn this listener off using `offWithName(listener_name)`. This is a way to keep track of listeners. If a `listener_name` is given again with a different callback function, the old callback function is replaced, and will no longer be called when the event is fired, instead the new function will be called. If no `listener_name` is given, a unique string will be generated as the listener's name and returned.


    **Example**

    .. sourcecode:: js

      TODO: change according to the method signature
      var toolRef = Appbase.ref('https://shawshank.api.appbase.io/prisoner/andy_dufresne/rock_hammer');
      // Existing data : {size:12}

      toolRef.on('properties',function(err,ref,snap){
         console.log(snap.properties().size); 
      );

      setTimeout(function(){
          toolRef.properties.add('size',13);
      },2000);

      /* It would immediately log '12' - the existing properties. 
       * After 2 secs, It would log '13'.
       */

  .. raw:: html

    </div>

|

.. index:: on('edge_added')

:function-name:`on('edge_added')` :function-signature:`on('edge_added', edgetype, [listener_name], [options], callback)`
-------------------------------------------------------------------------------------------------------------------------------

  .. raw:: html 

    <div id="appbase-edge-added" class="foobar">

  .. container:: definition

    Get existing edges inserted at a location, and listen to new ones.

  .. container:: returns

    **Returns**
      `String` - the listener's name and can be used to turn the listener off.

  .. container:: everything-else

    **Usage**
      ``vref.on('edge_added', edgetype, [listener_name], [options], callback)``

      - **edgetype** `String` - 'ordered' or 'named'
      - **listener_name** *(Optional)* `String` - Name given to the listener. For details, take a look at the documentation of `on('properties')`
      - **options** `Object`
          - **limit** How many existing edges to fetch - only for ordered edges
          - **startAt** `Number` - Priority to start with - only for ordered edges
          - **endAt** `Number` - Priority to end with - only for ordered edges
          - **skip**  `Number` - Skip initial edges - only for ordered edges
          - **noData** `Boolean` - Whether to include the data stored at the vertex where the edge points 
      - **callback** `Function` - will be passed these as arguments:
          - **error** `Boolean/String`
          - **vref** `Vertex Reference` - pointing to path of the edge
          - **[snapObj]** `Vertex Snapshot` - Snapshot of the data stored in the vertex, where the edge points. Take a look at the documentation of `Vertex Snapshot`

    `snapObj` will not be passed if `{noData: true}` is passed as the options to the listener.

    `startAt` and `limit` are only effective for retrieving the existing properties. New edges will be returned regardless of their index.


    **Example**

    .. sourcecode: js

      TODO: change according to the method signature
      var redRef = Appbase.new('prisoner','ellis_boyd_red'); // New prisoner
      redRef.properties.add('firstname','Ellis Boyd');
      redRef.properties.add('lastname','Redding');
      redRef.properties.add('nick','Red');

      var andyRef = Appbase.ref('https://shawshank.api.appbase.io/prisoner/andy_dufresne');

      andyRef.on('edge_added',function(edgeSnap){
          console.log('Name:', edgeSnap.val().nick);
      });

      andyRef.edges.add('best*friend',redRef);

      /* stdout
       * |-----------------
       * | Name: Red
       * |-----------------
       */

  .. raw:: html

    </div>

|

.. index:: on('edge_removed')

:function-name:`on('edge_removed')` :function-signature:`on('edge_removed', edgetype, [listener_name], callback)`
--------------------------------------------------------------------------------------------------------------------

  .. raw:: html

    <div id="appbase-edge-removed" class="foobar">

  .. container:: definition

    Listen to removal of edges. 

  .. container:: returns

    **Returns**
      `String` - the listener's name and can be used to turn the listener off.

  .. container:: everything-else

    **Usage**
      ``vref.on('edge_removed', edgetype, [listener_name], callback)``

      - **edgetype** `String` - 'ordered' or 'named'
      - **listener_name** *(Optional)* `String` - Name given to the listener. For details, take a look at the documentation of `on('properties')`.
      - **callback** `Function` - will be passed these as arguments:
          - **error** `Boolean/String`
          - **vref** `Vertex Reference` - pointing to path of the edge
          - **snapObj** `Vertex Snapshot` - Snapshot of the data stored in the vertex, where the edge used to point. Take a look at the documentation of `Vertex Snapshot`

  .. raw:: html

    </div>

|

.. index:: on('edge_changed')

:function-name:`on('edge_changed')` :function-signature:`on('edge_changed', [listener_name], callback)`
-------------------------------------------------------------------------------------------------------

  .. raw:: html

    <div id="appbase-edge-changed" class="foobar">

  .. container:: definition

    If the properties of the vertex, pointed by an existing edge is changed, this event is fired.

  .. container:: returns

    **Returns**
      `String` - the listener's name and can be used to turn the listener off.

  .. container:: everything-else

    **Usage**
      ``vref.on('edge_changed', edgetype, [listener_name], callback)``

    - **edgetype** `String` - 'ordered' or 'named'
    - **listener_name** *(Optional)* `String` - Name given to the listener. For details, take a look at the documentation of `on('properties')`.
    - **callback** `Function` - will be passed these as arguments:
        - **error** `Boolean/String`
        - **vref** `Vertex Reference` - pointing to path of the edge
        - **snapObj** `Vertex Snapshot` - Snapshot of the data stored in the vertex, where the edge points. Take a look at the documentation of `Vertex Snapshot`

    For this event to fire, in the background the vertexes pointed by all the edges are listened for **properties** event, and this would be a costly operation in terms of bandwidth if there are a huge number of edges.


    **Example**

    .. sourcecode: js

      TODO: change according to the method signature
      var andy = Appbase.ref('https://shawshank.api.appbase.io/prisoner/andy_dufresne');

      var toolRef = Appbase.ref('https://shawshank.api.appbase.io/prisoner/andy_dufresne/rock_hammer');
      // Existing data at this location: {size:12}


      andy.on('edge*changed',function(snapshot){
          for (var prop in snapshot.properties()) {
              console.log(prop,':',snapshot.properties()[prop]);
          }
      })

      toolRef.properties.add('usage','prison break');

      /* stdout
       * |-----------------
       * | size : 12
       * | usage : prison break
       * |-----------------
       */

  .. raw:: html

    </div>

|

.. index:: on('edge_moved')

:function-name:`on('edge_moved')` :function-signature:`on('edge_moved', [listener_name], callback)`
----------------------------------------------------------------------------------------------------

  .. raw:: html

    <div id="appbase-edge-moved" class="foobar">

  .. container:: definition

    TODO: only on ordered edges
    This event is fired, when the order of an edge is changed. 

    When the order of an edge is manually changed by calling `vref.edges.add()` on an existing edge, also the other edges are moved, either they are shifted upward or downward by '1' in the order. This event is fired for all the edges, moved manually or automatically.

  .. container:: returns

    **Returns**
      `String` - the listener's name and can be used to turn the listener off.

  .. container:: everything-else

    **Usage**
      ``vref.on('edge_moved', [listener_name], callback)``

      - **listener_name** *(Optional)* `String` - Name given to the listener. For details, take a look at the documentation of `on('properties')`.
      - **listenDepth** `Number` - The depth of edges up to which listen for data changes. Default value is `0`, meaning no listening on the properties.
      - **callback** `Function` - will be passed these as arguments:
          - **error** `Boolean/String`
          - **vref** `Vertex Reference` - pointing to path of the edge
          - **snapObj** `Vertex Snapshot` - Snapshot of the data stored in the vertex, where the edge points. Take a look at the documentation of `Vertex Snapshot`
 
  .. raw:: html

    </div>

|

.. index:: off()

:function-name:`off()` :function-signature:`off()`
--------------------------------------------------

  .. raw:: html

    <div id="appbase-off" class="foobar">

  .. container:: definition

    Turn off the listeners on an event.

  .. container:: returns

    **Returns**
      `Array` - containing listeners' names, which have been turned off.

  .. container:: everything-else

    **Usage**
      ``vref.off([event])``

      - **event** *(optional)* `String` - All the listeners on this event, will be turned off. If no event is given, all the listeners on all the events will be turned off.

|

.. index:: off()

:function-name:`off()` :function-signature:`off(listener_name)`
----------------------------------------------------------------

  .. raw:: html

    <div id="appbase-off" class="foobar">

  .. container:: definition

    Turn off a listener by its name.

  .. container:: everything-else

    **Usage**
      ``off(listener_name)``

    - **listener_name** `String` - The unique name given to the listener while calling `on(event)`.

  .. raw:: html

    </div>

|

-------------------


Vertex Snapshot
===============

*Vertex Snapshot* is an immutable copy of the data at a location in
*Appbase*. It is passed to callbacks in all event firing. It can’t be
modified and will never change. To modify data, use an Appbase
reference.

Snapshot Methods
----------------

+--------------------+---------------------------------------------------------------------+
| Method             | Returns                                                             |
+====================+=====================================================================+
| properties()       | prop-value pairs in the form of a JavaScript object                 |
+--------------------+---------------------------------------------------------------------+
| prevProperties()   | the previous version of prop-value pairs                            |
+--------------------+---------------------------------------------------------------------+
| namespace()        | the *namespace* of the vertex                                       |
+--------------------+---------------------------------------------------------------------+
| name()             | the edge name with which the vertex is stored in the current path   |
+--------------------+---------------------------------------------------------------------+
| index()            | index of this vertex in the current path                            |
+--------------------+---------------------------------------------------------------------+
| prevIndex()        | the previous index of this vertex in the current path               |
+--------------------+---------------------------------------------------------------------+

The following table shows what exact data would be returned by the
methods in different kind of events.

+--------------------+------------------------------------------------------------------------------------------------------------------------------------------+----------------------------------------------------+------------------------------------------------------------------+------------------------------------------------------------------------+----------------------------------------------------+
| Method             | value                                                                                                                                    | edge\_added                                        | edge\_removed                                                    | edge\_changed                                                          | edge\_moved                                        |
+====================+==========================================================================================================================================+====================================================+==================================================================+========================================================================+====================================================+
| properties()       | properties of the **vertex being listened**                                                                                              | properties of the vertex pointed by **the edge**   | **null**                                                         | **new** properties of the vertex pointed by **the edge**               | properties of the vertex pointed by **the edge**   |
+--------------------+------------------------------------------------------------------------------------------------------------------------------------------+----------------------------------------------------+------------------------------------------------------------------+------------------------------------------------------------------------+----------------------------------------------------+
| prevProperties()   | **null** when the event is fired for **the first time** , *and*, **previous version** of properties when they are **changed later on**   | **null**                                           | properties of the vertex pointed by **the edge being deleted**   | **previous version** of properties of the vertex pointed by the edge   | same as **properties()**                           |
+--------------------+------------------------------------------------------------------------------------------------------------------------------------------+----------------------------------------------------+------------------------------------------------------------------+------------------------------------------------------------------------+----------------------------------------------------+
| index()            | **index** of the edge pointing to **this vertex** in the current path                                                                    | **index** of **the edge**                          | **null**                                                         | **index** of **the edge**                                              | **current** index of **the edge**                  |
+--------------------+------------------------------------------------------------------------------------------------------------------------------------------+----------------------------------------------------+------------------------------------------------------------------+------------------------------------------------------------------------+----------------------------------------------------+
| prevIndex()        | same as **index()**                                                                                                                      | **null**                                           | **index** of **the edge being deleted**                          | same as **index()**                                                    | **previous** index of **the edge**                 |
+--------------------+------------------------------------------------------------------------------------------------------------------------------------------+----------------------------------------------------+------------------------------------------------------------------+------------------------------------------------------------------------+----------------------------------------------------+

|

---------------------

Privileged Methods
==================

These methods shouldn't be a necessity in the normal application working. The use of these methods can be controlled via security rules.

|

.. index:: Appbase.rename()

:function-name:`Appbase.rename()` :function-signature:`Appbase.rename()`
------------------------------------------------------------------------

  .. raw:: html

    <div id="appbase-rename" class="foobar">

  .. container:: definition

    Allows renaming of namespaces, vertex primary keys and moving a vertex to a different namespace.

  .. container:: returns

    **Returns**
      `Vertex Reference` - pointing to the new path, if renaming of a vertex is happening, `undefined` otherwise.

  .. container:: everything-else

    **Usage**
      ``Appbase.rename(old,new)``

      - **old** `String/Vertex Reference` - old '/namespace', or '/namespace/pk' or `Vertex Reference` poiting to '/namespace/pk'
      - **new** `String` - new '/namespace', or '/namespace/pk'

    The old /namespace or /namespace/pk must exist and the new one must not.

    The edges pointing to the vertex being renamed will still work.

    **Example**

    .. sourcecode:: js

      Appbase.rename('/users', '/prisoners'); // Renaming a namespace

      Appbase.rename('/users/abc', '/users/xyz'); //Renaming the primary key

      Appbase.rename('/users/abc', '/prisoners'); // Moving a vertex to another namespace

      Appbase.rename('/users/abc', '/prisoners/pqr'); // Moving a vertex to another namespace and renaming its primary key too

      Appbase.rename('/user/pqr/xyz','/user/abc/klm'); //Throws an error, as the path should only be up to /namespace/pk

      Appbase.rename('/users', '/prisoners/abc'); // Throws an error, if `old` is a namespace, the `new` has to a be namespace.

      var vref = ('/user/abc');
      var abNewRef = Appbase.rename(vref,'/user/pqr'); //Renaming the primary key. `vref` will now turn invalid, and listeners won't work, until a new vertex at /user/abc is created. Use `abNewRef` instead.

      var prisonerRef = Appbase.rename(abNewRef,'/prisoner'); // Moving a vertex to another namespace.

  .. raw:: html

    </div></div>

|