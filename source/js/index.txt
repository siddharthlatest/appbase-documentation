.. role:: function-name
.. role:: function-name-danger
.. role:: function-signature
.. role:: text-note
.. role:: null-effect
.. role:: section-header
.. role:: hyperlink-underline

**********************
Appbase Javascript API
**********************

|

-----------------------------

.. index:: Javascript Overview

Brief Overview
==============

.. raw:: html

  <p>
    The Appbase data model is represented as a graph. Vertices are used for storing and retrieving primitive data, and linked to other vertices using edges. Read more about it in the <strong><a href="../overview/index.html">overview document</a></strong>.
  </p>
  <h3 class="null-effect" style="margin-top:20px;">Appbase Datatypes</h3>
  <h4>Primitive</h4>
    <ul>
      <li>Boolean</li>
      <li>Number</li>
      <li>String</li>
    </ul>
  <h4>Objects</h4>
    <ul>
      <li>
        <dt>Appbase Reference</dt>
        <dd>Reference to a vertex on a given <em>Appbase path</em>.</dd>
      </li>
      <li>
        <dt>Vertex Snapshot</dt>
      </li>
    </ul>

| 

Appbase Object
==============


----

**Appbase** is the global object exposed to the Javascript namespace. It has three methods ``credentials()``, ``create()``, ``ref()`` and ``search()``.

|

.. index:: Appbase.appCredentials()

:function-name:`Appbase.credentials()` :function-signature:`Appbase.credentials(appname, appsecret)`
-----------------------------------------------------------------------------------------------------

  .. raw:: html

    <div id="appbase-credentials" class="foobar">

  .. container:: definition

    Authorize the app credentials using the `name` and `secret` identifiers, as they appear in the developer console.

  .. container:: returns

    **Returns**
      *boolean* ``true`` if the app is successfully registered.

  .. container:: everything-else

    **Usage**
      ``Appbase.credentials(appname, appsecret)``

      - **name** ``String`` --- App name
      - **secret** ``String`` --- App secret key

    The base URL of the app is ``http://*appname*.api1.appbase.io``.

    **Example**

    .. sourcecode:: js

      var register = Appbase.app('aphrodite', '4d8d0072580912343cd74aa0015cd217');
      if (register === true)
        console.log("app successfully registered");

  .. raw:: html

    </div>

| 

.. index:: Appbase.create()

:function-name:`Appbase.create()` :function-signature:`Appbase.create(namespace, [key])`
----------------------------------------------------------------------------------------

  .. raw:: html

    <div id="appbase-create" class="foobar">

  .. container:: definition

    Create a new Appbase **vertex**.

  .. container:: returns

    **Returns**
      *Appbase Reference* of the created vertex.

  .. container:: everything-else

    **Usage**
      ``Appbase.create(namespace, [key])``

      - **namespace** ``String`` --- A namespace identifier, a new namespace is created if one does not already exist.
      - **key** *(optional)* ``String`` --- Vertex identifier, has to be unique in a namespace. A unique identifier is generated if not provided.

      :text-note:`Note` *key* can contain all ascii characters except for whitespaces, `````, ``~``, ``:`` or ``/`` characters.

    **Example**

    .. sourcecode:: js

      var abref = Appbase.create('Materials', 'Ice');

  .. raw:: html

    </div>

| 

.. index:: Appbase.ref()

:function-name:`Appbase.ref()` :function-signature:`Appbase.ref(path)`
----------------------------------------------------------------------

  .. raw:: html

    <div id="appbase-ref" class="foobar">

  .. container:: definition

    Reference to an *existing vertex* from the Appbase URL.

  .. container:: returns

    **Returns**   
      `Appbase Reference` of the vertex.

  .. container:: everything-else

    **Usage**
      ``Appbase.ref(path)``

      | **path** ``String`` Appbase path of the vertex

    **Example**

    .. sourcecode:: js

      var abref = Appbase.ref('Materials/Ice/');


    An *appbase path* is very similar to a UNIX path. Here, we are fetching the vertex ``Ice`` that we just created under the namespace ``Materials``.

  .. raw:: html

    </div>

|

.. index:: Appbase Reference

Appbase Reference
=================

-----

**Appbase Reference** has methods for writing, and reading (listening) on the Appbase graph.

|

.. index:: setData()

:function-name:`.setData()` :function-signature:`setData({name: val, ...}, [callback])`
---------------------------------------------------------------------------------------

  .. raw:: html

    <div id="appbase-set-property" class="foobar">

  .. container:: definition

    Set one or more data properties to this Appbase location.

  .. container:: everything-else

    **Usage**
      ``abref.setData({name: val, ...}, [callback])``

      - {name: val, ...} `Javascript object`
          - **name** `String` --- identifier of the data property
          - **val** `Boolean` / `Number` / `String` --- value of the data property
      - **callback** *(optional)* ``Function`` --- will be passed with these as arguments:
          - **error** `String` / `null` -- *String* containing the error message, *null* if :function-name:`setData()` is successfully run.
          - **abref** `Appbase Reference` -- points to the same path on which the method is called.

    **Example**

    .. sourcecode:: js

      /* we will use the 'abref' reference to the vertex at 
      'Materials/Ice' as used in the example above, and set data on it */
      var abref = abref.setData({"color":"A5F2F3", "density": 2.5}, function(error, abref) {
        if (error === null) { // confirming no errors
          console.log(abref)  // should have the properties "color" and "density" set
          // can be used for other things now
        }
      });

  .. raw:: html

    </div>

|

.. index:: removeData()

:function-name:`.removeData()` :function-signature:`removeData([name1, ...], [callback])`
-----------------------------------------------------------------------------------------

  .. raw:: html

    <div id="appbase-remove-property" class="foobar">

  .. container:: definition

    Remove a data property from the current location.

  .. container:: everything-else

    **Usage**
      ``abref.removeData(property_names, [callback])``

      - [name1, ...] ``Javascript Array`` --- One or more properties to be deleted
          - **name1** ``String`` -- The property identifier
      - **callback** *(optional)* ``Function`` will be passed with these arguments:
          - **error** `String` / `null` -- *String* containing the error message, *null* if :function-name:`removeData()` is successfully run
          - **abref** `Appbase Reference` -- of the vertex a the current location.

    **Example**

    .. sourcecode:: js

      /* remove the "density" property from our "Ice" vertex */
      var abref = abref.removeData(["density"], function(error, abref) {
        if (error === null) { // confirming no errors
          console.log(abref)  // should no longer contain the "density" property
        }
      });

  .. raw:: html

    </div>

|

.. index:: setEdge()

:function-name:`.setEdge()` :function-signature:`setEdge(dest_ref, edgename, [priority], [callback])`
-----------------------------------------------------------------------------------------------------

  .. raw:: html

    <div id="appbase-set-edge" class="foobar">

  .. container:: definition

    Set an edge to a specific destination vertex. It can optionally have a priority.

  .. container:: everything-else

    **Usage**
      ``abref.setEdge(dest_ref, edgename, [priority], [callback])``

      - **dest_ref** ``Appbase Reference`` of the out-vertex
      - **edgename** ``String`` --- Identifier for the edge
      - **priority** *(optional)* ``Number`` --- Set a priority for the current edge
      - **callback** *(optional)* ``Function`` will be passed with these arguments:
          - **error** `String` / `null` -- *String* containing the error message, *null* if :function-name:`setEdge()` is successfully run
          - **abref** `Appbase Reference` of the vertex at current location.

    **Example**

    .. sourcecode:: js

      abref.setEdge(Appbase.create('Materials/Iron'), 'accessories', function(err, abref) {
        if (typeof err !== String)
          console.log(abref)
      });

      /* ``abref`` now contains an edge pointing to 'Materials/Iron' */

|

.. index:: removeEdge()

:function-name:`.removeEdge()` :function-signature:`removeEdge([name1, ...], [callback])`
-----------------------------------------------------------------------------------------

  .. raw:: html

    <div id="appbase-remove-edge" class="foobar">

  .. container:: definition

    Removes an outgoing edge from the vertex at the current location.

  .. container:: everything-else

    **Usage**
      ``abref.removeEdge(name, [callback])``

      - [name1, ...] ``Javascript Array`` of the properties to be deleted
          - **name1** ``String`` -- Edge name
      - **callback** `Function` - will be passed these as arguments:
          - **error** `String` / `null` -- *String* containing the error message, *null* if :function-name:`removeEdge()` is successfully run
          - **abref** `Appbase Reference` - points to the same path on which the method is called

|

.. index:: url()

:function-name:`.URL()` :function-signature:`URL()`
-----------------------------------------------------

  .. raw:: html

    <div id="appbase-url" class="foobar">

  .. container:: definition

    Appbase URL of the current reference.

  .. container:: returns

    **Returns**
      ``String`` AppbaseURL

  .. container:: everything-else

    **Usage**
      ``abref.URL()``

    This is useful for hyperlinking elements.

    **Example**

    .. sourcecode:: js

      var url = abref.URL() // returns "*appname*.api1.appbase.io/Materials/Iron"

  .. raw:: html

    </div>

|

.. index:: path()

:function-name:`.path()` :function-signature:`path()`
-----------------------------------------------------

  .. raw:: html

    <div id="appbase-path" class="foobar">

  .. container:: definition

    Appbase path of the current reference.

  .. container:: returns

    **Returns**
      ``String`` Appbase path

  .. container:: everything-else

    **Usage**
      ``abref.path()``

    **Example**

    .. sourcecode:: js

        var path = abref.path() // returns "Materials/Iron"

  .. raw:: html

    </div>

|

.. index:: outVertex()

:function-name:`.outVertex()` :function-signature:`outVertex(name)`
-------------------------------------------------------------------

  .. raw:: html

    <div id="appbase-out" class="foobar">

  .. container:: definition

    Reference to the corresponding *out vertex* with the given *name*.

  .. container:: returns

    **Returns**
      `Appbase Reference` of the corresponding `out vertex`

  .. container:: everything-else

    **Usage**
      ``abref.outVertex(name)``

      - **name** `String` --- Edgename of the out vertex you are looking for. 

    **Example**

    .. sourcecode:: js

      var abref = Appbase.ref('Materials/Ice');
      var outref = abref.outVertex('accesories');

      /* `outref` points to the vertex at path: 'Materials/Ice/accesories' */

  .. raw:: html

    </div>

|

.. index:: inVertex()

:function-name:`.inVertex()` :function-signature:`inVertex()`
-------------------------------------------------------------

  .. raw:: html

    <div id="appbase-in" class="foobar">

  .. container:: definition

    Reference to the corresponding *in vertex* from the current vertex.

  .. container:: returns

    **Returns**
      `Appbase Reference` of the `in vertex`

  .. container:: everything-else

    **Usage**
      ``abref.inVertex()``

    Throws an error if ``abref`` does not have an **in vertex**.

    **Example**

    .. sourcecode:: js

      var iceref = Appbase.ref('Materials/Ice/accessories');
      var abref = iceref.inVertex();

      /* `abref` points to the the path 'Materials/Ice' */
       
      var newref = abref.inVertex();   // Throws an error

  .. raw:: html

    </div>

|

Data Listeners
==============

----

.. index:: on('properties')

:function-name:`on('properties')` :function-signature:`on('properties', callback)`
----------------------------------------------------------------------------------

  .. raw:: html

    <div id="appbase-on-properties" class="foobar">

  .. container:: definition

    Listen to value changes on a vertex.

  .. container:: returns

    **Returns**
      ``String`` The name of the listener, which can be used to turn them off

  .. container:: everything-else

    **Usage**
      ``abref.on('properties', callback)``

      - **callback** ``Function`` --- will be passed these as arguments:
          - **error** `String` / `null` -- *String* containing the error message, *null* if :function-name:`on('properties')` listening is successful
          - **abref** `Appbase Reference` -- points to the path on which the event is fired
          - **snapObj** `Vertex Snapshot` -- Snapshot of the data stored in the vertex. Take a look at the documentation of `Vertex Snapshot`


    **Example**

    .. sourcecode:: js

      TODO: change according to the method signature
      var toolRef = Appbase.ref('https://shawshank.api.appbase.io/prisoner/andy_dufresne/rock_hammer');
      // Existing data : {size:12}

      toolRef.on('properties',function(err,ref,snap){
         console.log(snap.properties().size); 
      );

      setTimeout(function(){
          toolRef.properties.add('size',13);
      },2000);

      /* It would immediately log '12' - the existing properties. 
       * After 2 secs, It would log '13'.
       */

  .. raw:: html

    </div>

|

.. index:: on('edge_added')

:function-name:`on('edge_added')` :function-signature:`on('edge_added', callback)`
----------------------------------------------------------------------------------

  .. raw:: html 

    <div id="appbase-edge-added" class="foobar">

  .. container:: definition

    Get existing edges inserted at a location, and listen to new ones.

  .. container:: returns

    **Returns**
      `String` - the listener's name and can be used to turn the listener off.

  .. container:: everything-else

    **Usage**
      ``abref.on('edge_added', callback)``

      - **callback** `Function` - will be passed these as arguments:
          - **error** `String` / `null` --
          - **abref** `Appbase Reference` - pointing to path of the edge
          - **[snapObj]** `Edge Snapshot` - Snapshot of the data stored in the vertex, where the edge points. Take a look at the documentation of `Vertex Snapshot`

    `snapObj` will not be passed if `{noData: true}` is passed as the options to the listener.

    `startAt` and `limit` are only effective for retrieving the existing properties. New edges will be returned regardless of their index.


    **Example**

    .. sourcecode: js

      TODO: change according to the method signature
      var redRef = Appbase.new('prisoner','ellis_boyd_red'); // New prisoner
      redRef.properties.add('firstname','Ellis Boyd');
      redRef.properties.add('lastname','Redding');
      redRef.properties.add('nick','Red');

      var andyRef = Appbase.ref('https://shawshank.api.appbase.io/prisoner/andy_dufresne');

      andyRef.on('edge_added',function(edgeSnap){
          console.log('Name:', edgeSnap.val().nick);
      });

      andyRef.edges.add('best*friend',redRef);

      /* stdout
       * |-----------------
       * | Name: Red
       * |-----------------
       */

  .. raw:: html

    </div>

|

.. index:: on('edge_removed')

:function-name:`on('edge_removed')` :function-signature:`on('edge_removed', callback)`
--------------------------------------------------------------------------------------

  .. raw:: html

    <div id="appbase-edge-removed" class="foobar">

  .. container:: definition

    Listen to removal of edges. 

  .. container:: returns

    **Returns**
      `String` - the listener's name and can be used to turn the listener off.

  .. container:: everything-else

    **Usage**
      ``abref.on('edge_removed', callback)``

      - **callback** `Function` - will be passed these as arguments:
          - **error** `Boolean/String`
          - **abref** `Appbase Reference` - pointing to path of the edge
          - **snapObj** `Edge Snapshot` - Snapshot of the data stored in the vertex, where the edge used to point. Take a look at the documentation of `Vertex Snapshot`

  .. raw:: html

    </div>

|

.. index:: on('edge_changed')

:function-name:`on('edge_changed')` :function-signature:`on('edge_changed', callback)`
--------------------------------------------------------------------------------------

  .. raw:: html

    <div id="appbase-edge-changed" class="foobar">

  .. container:: definition

    If the properties of the vertex, pointed by an existing edge is changed, this event is fired.

  .. container:: returns

    **Returns**
      `String` - the listener's name and can be used to turn the listener off.

  .. container:: everything-else

    **Usage**
      ``abref.on('edge_changed', callback)``

    - **callback** `Function` - will be passed these as arguments:
        - **error** `Boolean/String`
        - **abref** `Appbase Reference` - pointing to path of the edge
        - **snapObj** `Edge Snapshot` - Snapshot of the data stored in the vertex, where the edge points. Take a look at the documentation of `Vertex Snapshot`

    For this event to fire, in the background the vertexes pointed by all the edges are listened for **properties** event, and this would be a costly operation in terms of bandwidth if there are a huge number of edges.


    **Example**

    .. sourcecode: js

      TODO: change according to the method signature
      var andy = Appbase.ref('https://shawshank.api.appbase.io/prisoner/andy_dufresne');

      var toolRef = Appbase.ref('https://shawshank.api.appbase.io/prisoner/andy_dufresne/rock_hammer');
      // Existing data at this location: {size:12}


      andy.on('edge*changed',function(snapshot){
          for (var prop in snapshot.properties()) {
              console.log(prop,':',snapshot.properties()[prop]);
          }
      })

      toolRef.properties.add('usage','prison break');

      /* stdout
       * |-----------------
       * | size : 12
       * | usage : prison break
       * |-----------------
       */

  .. raw:: html

    </div>

|

.. index:: off()

:function-name:`off()` :function-signature:`off([event])`
---------------------------------------------------------

  .. raw:: html

    <div id="appbase-off" class="foobar">

  .. container:: definition

    Turn off the listeners on an event.

  .. container:: returns

    **Returns**
      `Array` - containing listeners' names, which have been turned off.

  .. container:: everything-else

    **Usage**
      ``abref.off([event])``

      - **event** *(optional)* `String` - All the listeners on this event, will be turned off. If no event is given, all the listeners on all the events will be turned off.

  .. raw:: html

    </div>

|

Data Snapshots
==============

-------------------

Data snapshots are immutable copies of the data stored at `Appbase References`_. There are two kinds of snapshots: `Property Snapshot`_ and `Edge Snapshot`_, fired when listening to on('properties') or one of the edge listeners.


|

.. index:: propertySnapshot()

:function-name:`Property Snapshot`
----------------------------------

  .. raw:: html

    <div id="appbase-property-snapshot" class="foobar">

  .. container:: definition

    *Property Snapshot* is an immutable copy of the property data at a location in *Appbase*. It has the following methods to obtain the changes in the Appbase Reference.
    
    +--------------------+---------------------------------------------------------------------+
    | Method             | Returns                                                             |
    +====================+=====================================================================+
    | properties()       | data properties as a Javascript object                              |
    +--------------------+---------------------------------------------------------------------+
    | prevProperties()   | data properties before data **change** as a Javascript object       |
    +--------------------+---------------------------------------------------------------------+

  .. raw:: html

    </div>

|

.. index:: edgeSnapshot()

:function-name:`Edge Snapshot`
------------------------------

  .. raw:: html

    <div id="appbase-edge-snapshot" class="foobar">

  .. container:: definition

    *Edge Snapshot* is an immutable copy of the edge data at a location in *Appbase*. It has the following methods to obtain the edge related changes in the Appbase Reference.
    
    +--------------------+---------------------------------------------------------------+
    | Method             | Returns                                                       |
    +====================+===============================================================+
    | priority()         | current priority of the edge (``null`` if not set)            |
    +--------------------+---------------------------------------------------------------+
    | prevPriority()     | previous priority of the edge (``null`` if not set)           |
    +--------------------+---------------------------------------------------------------+

  .. raw:: html

    </div>

|

|